# Using scisample with codepy

In this tutorial, you will run `codepy` with a variety of `scisample` sampling methods.

## Accessing the Model

For this tutorial, you will use an example `ares` model to set up
and run a simple workflow.  
---8<--- "docs/tutorials/.accessing-ares-model.md"
You can also
[manually set up the model](running-ares-model.md#setting-up-the-model-manually).

## Codepy model

The following `codepy` `model.yaml` file will generate run directories, and insert variable values into `out.txt`

!INCLUDECODE "../../examples/codepy_simple/model.yaml" (yaml)


## Sampling methods

The following sampling methods are currently supported: 

* [best_candidate](#best_candidate): Random sampling with approximately constant sampling density. 
* [column_list](#column_list): Inline list of sample points, with one simulation defined on each line.
* [cross_product](#cross_product): The Cartesian product of sample points for multiple variables.
* [csv](#csv): Reads sample points from a `csv` file.
* [custom](#custom): Uses an external python method to generate sample points.
* [list](#list): Inline list of sample points, with one variable defined on each line.
* [random](#random): Random sampling from a uniform distribution.
* [uqpipeline](#uqpipeline): If possible, enables access to all of [LLNL's UQPipeline](https://www.cesm.ucar.edu/events/wg-meetings/2011/presentations/amwg/tannahill.pdf) sampling methods. (Note: the UQPipeline is not currently available as open source.)

## best_candidate {#best_candidate}

## column_list {#column_list}

## cross_product {#cross_product}

## csv {#csv}

## custom {#custom}

## list {#list}

Using 

```bash
codepy run . -c codepy_config_list.yaml
```

to run the following `codepy_config` file

!INCLUDECODE "../../examples/codepy_simple/codepy_config_list.yaml" (yaml), 2:999

will result in the following `out.txt` files.

!INCLUDECODE "../../examples/codepy_simple/list_out.txt" 

## random {#random}

## uqpipeline {#uqpipeline}


## Running the Model

To run the model in its default configuration, the command is `codepy run <model name>`
```
codepy run shocktube2d
```
This will create and submit a study specification.  The specification will be written
to the `codepy_study.yaml` file by default.

```yaml
---8<--- "../examples/model_files/ares/sample_output/baseline_study.yaml"
```

`codepy` will submit the study, and by default will run in the
`/p/lustre1/<username>/studies` directory.  A time-stamped directory named
`shocktube2d-study_YYYYMMDD_HHMMSS` will be created, and contain the study output.
An abbreviated directory tree is shown below.

```
studies/shocktube2d-study_YYYYMMDD_HHMMSS
`-- shocktube2d-study_YYYYMMDD-HHMMSS_1
    `-- run-shocktube2d-baseline
        |-- xxxxhsp
        `-- run-shocktube2d-baseline.slurm.sh
```

The simulation will be run in the `run-shocktube2d-baseline` directory.

---8<--- "docs/tutorials/.manual-setup-ares-model.md"
